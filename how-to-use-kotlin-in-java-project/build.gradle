import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
  // Apply the java plugin to add support for Java
  id 'java'

  // Apply the application plugin to add support for building a CLI application
  id 'application'

  // Apply the Kotlin JVM plugin to add support for Kotlin.
  id 'org.jetbrains.kotlin.jvm' version "${kotlin_version}"
}

repositories {
  // Use jcenter for resolving dependencies.
  // You can declare any Maven/Ivy/file repository here.
  jcenter()
}

dependencies {
  // This dependency is used by the application.
  implementation 'com.google.guava:guava:28.0-jre'

  // Reflection is a set of language and library features that allows you to introspect the structure of your program at runtime.
  implementation 'org.jetbrains.kotlin:kotlin-reflect'
  // Reflection is a set of language and library features that allows you to introspect the structure of your program at runtime.
  implementation 'org.jetbrains.kotlin:kotlin-stdlib'

  // Use TestNG framework, also requires calling test.useTestNG() below
  testImplementation 'org.testng:testng:6.14.3'
}

application {
  // Define the main class for the application
  mainClassName = 'dev.trile.customexception.App'
}

test {
  // Use TestNG for unit tests
  useTestNG()
}

tasks.withType(KotlinCompile).configureEach {
  kotlinOptions {
    freeCompilerArgs = ['-Xjsr305=strict']
    jvmTarget = jdk_version
  }
}

sourceCompatibility = jdk_version

jar {
  // This line of code recursively collects and copies all of a project's files
  // and adds them to the JAR itself. One can extend this task, to skip certain
  // files or particular types at will
  from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
